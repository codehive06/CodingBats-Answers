public class ArrayMethods {
  


    
    public static void main(String[] args) {
                int[] array = {8,24,17,17,25,72,-3,52,52,36,16,24,43};
                System.out.println("Name: Aryan Singh");
                System.out.println("The array is:\n"+ArrayMethods.display(array));
                System.out.println("The sum is:"+ArrayMethods.sum(array));
                System.out.println("The average is:"+ArrayMethods.average(array));
                System.out.println("The max value is:"+ArrayMethods.max(array));
                System.out.println("The max index is:"+ArrayMethods.maxIndex(array));
                System.out.println("The min value is:"+ArrayMethods.min(array));
                System.out.println("The min index is:"+ArrayMethods.minIndex(array));
                System.out.println("The number of 24 occurrences is:"+ArrayMethods.occurrences(array, 24));
                System.out.println("The number of repeated adjacent numbers is:"+ArrayMethods.repeats(array));
                System.out.println("The largest gap is at index:"+ArrayMethods.largestGap(array));
                //System.out.println(ArrayMethods.display(ArrayMethods.loadArray(5, 30)));
        }


  
  
  //1. Display method.  Returns a string displaying the index and value at each location.
  public static String display(int[] arr){
   String word = "";
   for(int i = 0;i<arr.length;i++){
     word = word + "subscript[" + i + "] = " + arr[i] + "\n"; 
   }
    return word;
  }
    
  //2. Sum method.  You can use an enhanced for loop to accomplish the task.
  public static int sum (int[] arr){
    int sum1 = 0;
    for(int num:arr ){
      sum1= sum1 + num;
    }
    return  sum1 ;
  }
  //3. Average method.  Use the sum method in the average method.
  public static double average (int[] arr){
    return ((1.0)*(ArrayMethods.sum(arr))/arr.length);
  }
  //4. Skip for now.  Difficult to understand.  Try at the end.


  //5. Max method.  You can use an enhanced for loop to accomplish the task.
  public static int max (int[] arr){
    int temp = arr[0];
    for(int num:arr){
      if(temp<num){
        temp = num;
      }
    }
    return temp;
  }
  //6. MaxIndex method.  Because you are returning the max Index using an enhanced for loop doesn't make sense.
  
  public static int maxIndex(int[] arr){
    int index = 0;
    int max = arr[0];
    for(int i = 0;i<arr.length;i++){
      if(max<arr[i]){
        max = arr[i];
        index = i;
      }
    }
    return index;
  }
  //7. Min method.  Try using Math.min(__ , __) if you didn't do that strategy for max.
  public static int min (int[] arr ){
    int temp = arr[0];
    for(int i = 0;i<arr.length;i++){
      if(Math.min(temp,arr[i])==arr[i]){
        temp = arr[i];
    }
    }
      return temp;
  
 }
  //8. MinIndex method.
  public static int minIndex (int[] nums){
    int index = 0;
    int min = nums[0];
    for(int i = 0;i<nums.length;i++){
      if(min>nums[i]){
        min = nums[i];
        index= i;
      }
    }
    return index;
  }
  //9. Occurrences method.  You need to access two values, so no enhanced for loop.
  public static int occurrences (int[] nums, int target){
    int count = 0;
    for(int i=0;i<nums.length;i++){
      if(nums[i]==target){
        count++;
      }
    }
    return count;
  }
  //10. Repeats method.  Same as above, no enhanced for loop.
  public static int repeats (int[] nums){
    int count = 0;
    for(int i = 0;i<nums.length-1;i++){
      if(nums[i] == nums[i+1]){
        count++;
      }
    }
    return count;
  }
  //11. Largest Gap method.  No enhanced for loop, need to access 2 values in array.
  public static int largestGap (int[] nums){
    int index  = 0;
    int largest = Math.abs(nums[0]-nums[1]);
    for( int i = 0;i<nums.length-1;i++){
      if(Math.abs(nums[i]-nums[i+1])> largest) {
        largest = Math.abs(nums[i]-nums[i+1]);
        index = i;
      }
    }
    return index;
   }
  }